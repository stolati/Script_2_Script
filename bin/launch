#!/usr/bin/env bash
set -eu

if [[ -z "${script2script_path:-}" ]]; then
  echo "Profile not loaded"
  echo ". profile"
  exit 1
fi


bin="$script2script_path/bin"
doc="$script2script_path/doc"
example="$script2script_path/example"
lib="$script2script_path/lib"
refs="$script2script_path/refs"
code="$script2script_path/script2script"
test="$code/test"

launch_exe="$0"

command="${1:-}"
shift || true

case "$command" in

  test) #launch main with a test
    testNum="${1:-}"

    if [[ $testNum = "all" ]] ; then
      i=1 ; while [[ $i -lt 48 ]]; do
        $launch_exe test $i || true
        let i+=1
        read
      done
    fi

    listTests(){ #<filtre>
      find "$example" -type f -name "*${1:-}*.py" | sort | head -1
    }
    file="$(listTests "$testNum")"
    "$code/main.py" "$file"
  ;;
  init)
    mkdir -p "$refs"

    git_pull(){ #<git_path> <dir_name>
      typeset git_path="$1" dir_name="$2"
      if [[ ! -d "$refs/$dir_name" ]]; then
        echo "Cloning $dir_name"
        git clone "$git_path" "$refs/$dir_name" || true
        return
      fi

      echo "Pulling $dir_name"
      (
        cd "$refs/$dir_name"
        git pull || true
      )
    }
    mercurial_pull(){ #<mercurial_path> <dir_name>
      typeset merc_path="$1" dir_name="$2"
      [[ ! -d "$refs/$dir_name" ]] || hg clone "$merc_path" "$refs/$dir_name"
      echo "Pulling $dir_name"
      (
        cd "$refs/$dir_name"
        #TODO search for update mercurial stuffs, I don't know how to do
        #hg update --insecure
      )
    }

    echo "Pulling script2script from github"
    ( cd "$script2script_path" ; git pull ; )

    git_pull git://pyjs.org/git/pyjamas.git Pyjamas
    git_pull http://git.nuitka.net/Nuitka.git Nuitka
    git_pull git://gitorious.org/shedskin/mainline.git Shedskin
    mercurial_pull https://bitbucket.org/pypy/pypy Pypy
    mercurial_pull https://mock.googlecode.com/hg mock

    ( cd "$refs/Pyjamas" ; python bootstrap.py ; )

  ;;

  tests) #launch the unittest
    if [[ "X${1:-}" = "X--loop" ]]; then
      loop=true
      shift
      name="${1:-}"

      echo ""
      echo "#########################"
      echo " Exit the loop by Ctrl-C "
      echo "#########################"
      echo ""

      new=""
      old="different than new"
      while true; do
        date
        old="$new"
        while [ "X$old" == "X$new" ]; do
          sleep 1
          new="$($launch_exe tests "$name" 2>&1 | egrep -v '^Ran [0-9]+ tests in [0-9.]+s$')"
        done
        echo "$new"
      done

      #exit by Ctrl-C
    fi

    (
      name="test*${1:-}*.py"
      cd "$test" #change in case of access by absolute
      python -m unittest discover -s "$test" -v -p "$name"

    )
  ;;

  pylint) #launch pylint on the code
   pylint --rcfile="$script2script_path/pylint.conf" "$code"
   #TODO idea is to use the -e arguments
   #TODO use -d instead, some errors are no worth using

  ;;
  list)
    filter="${1:-}"
    find "$code" -name '*.py' | grep -v __init__ | grep -i "$filter"
  ;;

  todo)
    (
      cd "$script2script_path"
      find script2script test -type f | xargs grep --color TODO
    )
  ;;
  docs)
    (
      cd "$script2script_path"
      rm -Rf "$script2script_path/apidoc"
      mkdir -p "$script2script_path/apidoc"
      epydoc --conf epydoc.conf
      epydoc --check "script2script"
    )
  ;;
  *)
    echo "$launch_exe init #download/pull the git repository"
    echo "$launch_exe test <num> #launch main with a test"
    echo "$launch_exe tests [--loop] [name] #launch unittest modules"
    echo "$launch_exe pylint #launch pylint on all the files"
    echo "$launch_exe list #list python files in the project"
    echo "$launch_exe todo #return a list of all the todo in files"
    echo "$launch_exe docs #generate documentation"
  ;;

esac


#how I got rhino
#wget ftp://ftp.mozilla.org/pub/mozilla.org/js/rhino1_7R3.zip #and here I got js.jar

#TODO I can use the Pyjamaas/pyjs/tests as my own tests

#__EOF__

